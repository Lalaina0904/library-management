openapi: 3.0.3
info:
    title: Library API
    version: 1.0.1
    description: STD22113
servers:
    - url: https://library.com

# tags:
#     - name: Books
#       description: The books API
#     - name: Authors
#       description: The authors API

paths:
    /books:
        get:
            tags:
                - Books
            summary: Get all books'
            description: The returned books are ordered by updated datetime.
            operationId: getBooks
            parameters:
                - in: query
                  name: bookName
                  description: Filter return books by given name
                  required: false
                  schema:
                      type: string
                #TODO3: add parameter to filter books by intervals of dates of the releaseDate
                - in: query
                  name: releaseDateMin
                  description:
                      if `releaseDateMax` is not provided , then `releaseDateMin` is ignored.
                      `releaseDateMin` can not be after `releaseDateMax`
                  schema:
                      type: string
                      format: date
                  required: false

                - in: query
                  name: releaseDateMax
                  description:
                      if `releaseDateMin` is not provided , then `releaseDateMax` is ignored.
                      `releaseDateMax` can not be before `releaseDateMin`
                  schema:
                      type: string
                      format: date
                  required: false

            responses:
                200:
                    description: The list of filtered books
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/Book"
        put:
            tags:
                - Books
            summary: Create or update a list of books
            operationId: crupdateBooks
            requestBody:
                content:
                    application/json:
                        schema:
                            type: array
                            items:
                                $ref: "#/components/schemas/Book"
            responses:
                200:
                    description: The list of created or updated books
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/Book"
    /authors:
        #TODO2: complete GET (can be filtered by name) - PUT - DELETE
        get:
            tags:
                - Authors
            summary: Get all authors
            operationId: getAuthors
            parameters:
                - in: query
                  name: authorName
                  description: Filter authors by name
                  required: false
                  schema:
                      type: string
                      #   required: false

            responses:
                200:
                    description: The list of authors
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/Author"
        put:
            tags:
                - Authors
            summary: Create or update authors
            operationId: crupdateAuthors
            requestBody:
                content:
                    application/json:
                        schema:
                            type: array
                            items:
                                $ref: "#/components/schemas/Author"
            responses:
                200:
                    description: The list of created or updated authors
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/Author"
        # delete:
        #     tags:
        #         - Authors
        #     summary: Delete an author by ID
        #     operationId: deleteAuthor
        #     parameters:
        #         - in: path
        #           name: authorId
        #           description: The ID of the author to delete
        #           required: true
        #           schema:
        #               type: string
        #     responses:
        #         200:
        #             description: The deleted author
        #             content:
        #                 application/json:
        #                     schema:
        #                         $ref: "#/components/schemas/Author"

    # supprimer un auteur par son id via le path (URL) , et retourner l'auteur supprim√©

    /author/{id}:
        delete:
            tags:
                - Authors
            summary: Delete an author by ID
            operationId: deleteAuthor
            parameters:
                - in: path
                  name: id
                  description: The ID of the author to delete
                  required: true
                  schema:
                      type: string
            responses:
                200:
                    description: The deleted author
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Author"

components:
    schemas:
        Book:
            type: object
            properties:
                id:
                    type: string
                bookName:
                    type: string
                author:
                    #TODO1: set it as a component with properties : id, name, sex (M or F)
                    $ref: "#/components/schemas/Author"
                pageNumbers:
                    type: integer
                topic:
                    $ref: "#/components/schemas/Topic"
                releaseDate:
                    type: string
                    format: date
        Topic:
            type: string
            enum:
                - ROMANCE
                - COMEDY
                - OTHER
        Author:
            type: object
            properties:
                id:
                    type: string
                name:
                    type: string
                sex:
                    type: string
                    enum:
                        - M
                        - F
