openapi: 3.0.3
info:
    title: Library API
    version: 1.0.0
    description: STD22113
servers:
    - url: https://library.com

# tags:
#     - name: Books
#       description: The books API
#     - name: Authors
#       description: The authors API

paths:
    /books:
        get:
            tags:
                - Books
            summary: Get all books'
            description: The returned books are ordered by updated datetime.
            operationId: getBooks
            parameters:
                - in: query
                  name: bookName
                  description: Filter return books by given name
                  required: false
                  schema:
                      type: string
                #TODO3: add parameter to filter books by intervals of dates of the releaseDate
                - in: query
                  name: releaseDateMin
                  description:
                      if `releaseDateMax` is not provided , then `releaseDateMin` is ignored.
                      `releaseDateMin` can not be after `releaseDateMax`
                  schema:
                      type: string
                      format: date
                  required: false

                - in: query
                  name: releaseDateMax
                  description:
                      if `releaseDateMin` is not provided , then `releaseDateMax` is ignored.
                      `releaseDateMax` can not be before `releaseDateMin`
                  schema:
                      type: string
                      format: date
                  required: false

                # Add pagination parameters (page and pageSize)

                - in: query
                  name: page
                  description: The page number to return
                  required: false
                  schema:
                      type: integer
                      default: 1
                - in: query
                  name: pageSize
                  description: The number of books per page
                  required: false
                  schema:
                      type: integer
                      default: 50

            responses:
                200:
                    description: The list of filtered books
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/Book"
        put:
            tags:
                - Books
            summary: Create or update a list of books
            operationId: crupdateBooks
            requestBody:
                content:
                    application/json:
                        schema:
                            type: array
                            items:
                                $ref: "#/components/schemas/CrupdateBook"
            responses:
                200:
                    description: The list of created or updated books
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/Book"

    # pour associé un autheur à un livre

    /books/{bookId}/authors/{authorId}:
        put:
            tags:
                - Books & Authors
            summary: Associate a single book to one author
            operationId: crupdateBooks
            parameters:
                - in: path
                  name: bookId
                  description: The ID of the book to associate
                  required: true
                  schema:
                      type: string
                - in: path
                  name: authorId
                  description: The ID of the author to associate
                  required: true
                  schema:
                      type: string
            responses:
                200:
                    description: The updated book
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Book"

    # pour associé plusieurs books -> plusieurs authors

    /books/authors:
        put:
            tags:
                - Books & Authors
            summary: Associate some books to some authors
            operationId: crupdateBooks
            requestBody:
                content:
                    application/json:
                        schema:
                            type: array
                            items:
                                $ref: "#/components/schemas/UpdateBookAuthor"
            responses:
                200:
                    description: The list of updated books
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/Book"

    /authors:
        #TODO2: complete GET (can be filtered by name) - PUT - DELETE
        get:
            tags:
                - Authors
            summary: Get all authors
            operationId: getAuthors
            parameters:
                - in: query
                  name: authorName
                  description: Filter authors by name
                  required: false
                  schema:
                      type: string
                      required: false

                # Add path for pagination parameters (page and pageSize)

                - in: path
                  name: page
                  description: The page number to return
                  required: false
                  schema:
                      type: integer
                      default: 1

                - in: path
                  name: pageSize
                  description: The number of authors per page
                  required: false
                  schema:
                      type: integer
                      default: 50

            responses:
                200:
                    description: The list of authors
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/Author"
        put:
            tags:
                - Authors
            summary: Create or update authors
            operationId: crupdateAuthors
            requestBody:
                content:
                    application/json:
                        schema:
                            type: array
                            items:
                                $ref: "#/components/schemas/Author"
            responses:
                200:
                    description: The list of created or updated authors
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/Author"

        # TODO4 - vidéos : si ce n'était pas un param (un seul author) mais plusieurs author à supprimer , comment on ferait ?
        delete:
            tags:
                - Authors
            summary: Delete many authors
            operationId: deleteAuthors
            requestBody:
                content:
                    application/json:
                        schema:
                            type: array
                            items:
                                $ref: "#/components/schemas/Author"
            responses:
                200:
                    description: The list of deleted authors
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/Author"

    # supprimer un auteur par son id via le path (URL) , et retourner l'auteur supprimé

    /author/{id}:
        delete:
            tags:
                - Authors
            summary: Delete an author by ID
            operationId: deleteAuthor
            parameters:
                - in: path
                  name: id
                  description: The ID of the author to delete
                  required: true
                  schema:
                      type: string
            responses:
                200:
                    description: The deleted author
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Author"
/topics:
        get:
            tags:
                - Topics
            summary: Get all topics
            operationId: getTopics
            responses:
                200:
                    description: The list of topics
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/Topic"
        put:
            tags:
                - Topics
            summary: Create or update topics
            operationId: crupdateTopics
            requestBody:
                content:
                    application/json:
                        schema:
                            type: array
                            items:
                                $ref: "#/components/schemas/Topic"
            responses:
                200:
                    description: The list of created or updated topics
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/Topic"

    #supprimer un topic par son id via le path (URL) , et retourner le topic supprimé
    
    /topic/{id}:
        delete:
            tags:
                - Topics
            summary: Delete a topic by ID
            operationId: deleteTopic
            parameters:
                - in: path
                  name: id
                  description: The ID of the topic to delete
                  required: true
                  schema:
                      type: string
            responses:
                200:
                    description: The deleted topic
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Topic"

components:
    schemas:
        Topic:
            type: object
            properties:
                id:
                    type: string
                name:
                    type: string
                    enum:
                        - ROMANCE
                        - COMEDY
                        - OTHER
        Author:
            type: object
            properties:
                id:
                    type: string
                name:
                    type: string
                sex:
                    type: string
                    enum:
                        - M
                        - F
            # required:
            #     - id
        UpdateBookAuthor:
            type: object
            properties:
                bookId:
                    type: string

                authorId:
                    type: string

        CrupdateBook:
            type: object
            properties:
                id:
                    type: string
                bookName:
                    type: string
                pageNumbers:
                    type: integer
                topic:
                    $ref: "#/components/schemas/Topic"
                releaseDate:
                    type: string
                    format: date
        Book:
            allOf:
                - $ref: "#/components/schemas/CrupdateBook"
                - type: object
            properties:
                author:
                    $ref: "#/components/schemas/Author"
                topic:
                    $ref: "#/components/schemas/Topic"
